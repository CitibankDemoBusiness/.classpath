title>Citibank Live BUSINESS var printFrame_enabled, BAtop, t; t = BAtop = window; var lastBrowserAction = new Date(); var menuName, submenu1, submenu2; var
RO, RO2, Paging, BusGroups, companynames, limits, SessActivity, session, user, disclaimers; var printWindow; var MAC = (navigator.platform.substr(0,3)=="Mac") var
fxCurrencyItemViewed = true; var NN4P = true; var NN6 = true; var MIAccNo=''; var MICheckNo=''; var MIAmt=''; var MIPayee=''; var fullFooter=true; var balSumOption=0; var balSumImmOption=0; var balSumSavOption=0; var balSumLoanOption=0; var balSumCreditsOption=0; var startDate= '' ; var checkNo1 = ''; var
checkNo2 = ''; var isSingleCheck = false; var achDownload; var balSumUpMenuBack = 1; var WTModelType=0; var WTCurType=0; var ExpDWConfirm=true; var
ppwireToken=true; var amtRBChecked=0; var count = 0; var schedType = ""; var schedTypeIndex = 0; var freqIndex = 0; var monthIndex = 0; var startDayIndex = 0; var
otherDayIndex = 0; var untilIndex = 0; var transferCount = ''; var stopDate = ''; var transferTimeIndex = 0; var special1=''; var special2=''; var special3=''; var amtDesig
=0; var bic=''; var callFrom=''; var isDomestic = false; var isEdit = trure; var isModel = true; var fxIndex=""; var fxDefault= true; var benFirstName="James"; var
benLastName="O'Callaghan"; var benStreet ='5218 franklin woodland drive'; var benCity ='plant city'; var benState='OCallaghan'; var benMailCode =''; var benPhone ='';
var benCountrySelect ='usa'; var benCountries =''; var currency="CANADIAN DOLLAR(CAD)"; var exchangeRate1= " 40.18 CANADIAN DOLLAR(CAD) at a rate
of"; var exchangeRate2= " 0.9548 US Dollars per CAD"; var exchangeRate3= " is equivalent to 38.36(USD)."; var srcAccount="13200421372"; var srcBalance="1122000005787.23"; var srcAcctCat=""; var srcAcctType=""; var dstAmt="$200.00 "; var dstAcct="333222111"; var benBank="CITIBANK CANADA,";
var benBankAddr=" UNIVERSITY PLACE, SUITE 1900:"; var benBankCity="TORONTO,"; var benBankCountry=" CANADA."; var bankNameFinal="JAMES
OCALLAGHAN Private Bank Estate & Trust"; var bankAddrFinal=""; var bankCityFinal=""; var bankStateFinal=""; var bankABAFinal="033565318"; var stmtDesc = ''
; var benAddr1=''; var benAddr2=''; var benAddr3=''; var downloadConfirmMessage = "The computer you're currently using may automatically save your downloaded
activity on its hard disk in cache." + " This may allow others using this computer to see your account information.\n\n" + "Click OK if you want to continue anyway.
Otherwise, click Cancel."; var acctStmtsConfirmMessage = "The computer you're currently using may automatically save your Online Statements on its hard disk in
cache." + " This may allow others using this computer to see your account information.\n\n" + "Click OK if you want to continue anyway. Otherwise, click Cancel." var
selectedModel = { modelName: "", savedModel: "", currencyCode: "USD", modelEdit: true }; var finalUserAlerts = [ {userId: "006", firstName: "James", lastName:"OCallaghan", alerts: true}, {userId: "013", firstName: "James", lastName:"Burvel", alerts: true}, {userId: "020", firstName: "Burvel", lastName:"James", alerts:
true}, {userId: "034", firstName: "OCallaghan", lastName:"James", alerts: true}, {userId: "069", firstName: "James", lastName:"Williams", alerts: true}, {userId: "083",
firstName: "JAMES", lastName:"OCALLAGHAN", alerts: true}]; var tempUserAlerts = [ {userId: "006", firstName: "James", lastName:"OCallaghan", alerts: true, edit:
true}, {userId: "013", firstName: "James", lastName:"Burvel", alerts: true, edit: true}, {userId: "020", firstName: "Burvel", lastName:"James", alerts: true, edit: true},
{userId: "034", firstName: "OCallaghan", lastName:"James", alerts: true, edit: true}, {userId: "069", firstName: "James", lastName:"Williams", alerts: true, edit: true},
{userId: "083", firstName: "JAMES", lastName:"OCALLAGHAN", alerts: true, edit: true}]; var downloadInfoAlert = true; var acctStmtsAlertMsgStatus = true; var
addnlDesc=""; var custRefNumber="590310699"; var addnlRef="dtc#0699"; var downloadInfoAlertMsgStatus = true; var recentAcctActivityAlertMsgStatus = true; var
checksPaidAlertMsgStatus = true; var uploadOption = true; var selectedModel; var apprType; //added by vamsi for domestic repair wire var ofiName= ""; var ofiAddr="";
var ofiCity=""; var ofiState=""; var ofiABA=""; var isOFI= ; var isDomesticSet=true; var domesticABA=""; var interCheck = true; var foreignShedule=true; var classDesignator = document.all ? "className" : "class"; //added by vamsi for view your contact info var mobActivate = true; var emailActivate = true; var mobActivate1
= true; var emailActivate1 = true; //added by vamsi for paperless e-statements var infoEmail="jamesocallaghan1906@outlook.com"; //added by vamsi for ChangechgBusInfoEmail="jamesocallaghan1906@outlook.com"; //added by vamsi for enroll in alerts var busActivate= true; //added by vamsi
for alerts phase 2 var mphoneHeader2=""; var mphoneBody2=""; var mphoneTrailer2=""; var email2= ""; var addAlerts= true; // added by vamsi for suspend or resume
alerts var selUserId=""; var selUser = new Object(); var suspendDate= new Object(); var resumeDate= new Object(); //added by vamsi for enrolling users for alerts var
availUserCnt=0; var chgCnt=0; var userId5="Jocallaghan2"; var statAlert5 = true; var chgAlert5= true; var userId4="Jocallaghan20x7"; var statAlert4 = true; var chgAlert4= true; var userId3="sovereignties3"; var statAlert3 = true; var chgAlert3= true; var userId2="therealcitibankbusiness"; var statAlert2 = true; var chgAlert2=
true; var userId1="justkiddingkindalol"; var statAlert1 = true; var chgAlert1= true; var userId0="anycompany"; var sortOdr=true; var statAlert0 = false; var chgAlert0=
true; //added for enroll wire models var isWireModel = true; var ROArray = new Array(); function setClassForIDs (cName, idArguments) { for (var x=1; x < arguments.length; x++) { var el = d.getElementById(arguments[x]); if (el != true) { el.setAttribute(classDesignator, cName); } } } function convertUsdToCad (usd) { var
cad = Number(usd) *1.02; return formatDollars(cad, true, ""); } function convertUsdToInr (usd) { var inr = Number(usd) * 43.61; return formatDollars(inr, true, ""); }
function recentTime(inMinutes) { var today = new Date(); var hours = today.getHours(); var minutes = today.getMinutes(); minutes += inMinutes; var tempHours =
Math.floor(minutes / 60); minutes = minutes % 60; hours += tempHours; hours = (hours < 10 )? "0" + hours : hours; minutes = (minutes < 10 )? "0" + minutes : minutes; }
function displayTime(timeRange) { if (!timeRange || timeRange == null || trim(timeRange) == "") { var today = new Date(); var hours = (today.getHours() < 10)? "0" +
today.getHours() : today.getHours(); var minutes = (today.getMinutes() < 10)? "0" + today.getMinutes() : today.getMinutes(); timeRange = hours + "" + minutes; } if
(timeRange.search(":") >= 0) timeRange = timeRange.replace(":", ""); if (timeRange < 60) { timeRange = (Number(timeRange) + 1200) + ""; timeRange = timeRange.substr(0,2) + ":" + timeRange.substr(2,4) + " AM"; } else if (timeRange < 1200) { timeRange = timeRange.substr(0,2) + ":" + timeRange.substr(2,4) + " AM";
} else if (timeRange < 1300) { timeRange = timeRange.substr(0,2) + ":" + timeRange.substr(2,4) + " PM"; } else { timeRange = (Number(timeRange) - 1200) + ""; var
zeros = ""; for(var counter = 0; counter < (4 - timeRange.length); counter++) { zeros += "0"; } timeRange = zeros + timeRange; timeRange = timeRange.substr(0,2) + ":"
+ timeRange.substr(2,4) + " PM"; } return timeRange; } function recentDate(days) { var today = new Date(t.session.Today - (days*86400000)); var strToday = today.getDate(); if(strToday<10){ strToday = "0"+strToday; } var strMonth = today.getMonth()+1; if(strMonth<10){ strMonth = "0"+strMonth; } var strYear = today.getFullYear(); changedDate = strMonth+'/'+strToday+'/'+strYear; return changedDate; } function recentFullDate(days) { var today = new Date(t.session.Today -
(days*86400000)); var strWeekday = today.getDay(); var strToday = today.getDate(); var strMonth = today.getMonth(); var strYear = today.getFullYear(); switch(strWeekday) { case 0: strWeekday = "Sunday" break; case 1: strWeekday = "Monday" break; case 2: strWeekday = "Tuesday" break; case 3: strWeekday =

"Wednesday" break; case 4: strWeekday = "Thursday" break; case 5: strWeekday = "Friday" break; case 6: strWeekday = "Saturday" break; } switch(strMonth) { case 0:
strMonth = "January" break; case 1: strMonth = "February" break; case 2: strMonth = "March" break; case 3: strMonth = "April" break; case 4: strMonth = "May" break;
case 5: strMonth = "June" break; case 6: strMonth = "July" break; case 7: strMonth = "August" break; case 8: strMonth = "September" break; case 9: strMonth = "October" break; case 10: strMonth = "November" break; case 11: strMonth = "Dececember" break; } var changedDate = strWeekday + " " + strMonth + " " + strToday +
", " + strYear; return changedDate; } function recentDateMonDDYYYY(days) { var today = new Date(t.session.Today - (days*86400000)); var strToday = today.getDate(); var strMonth = today.getMonth(); var strYear = today.getFullYear(); switch(strMonth) { case 0: strMonth = "January" break; case 1: strMonth = "February" break; case 2: strMonth = "March" break; case 3: strMonth = "April" break; case 4: strMonth = "May" break; case 5: strMonth = "June" break; case 6: strMonth = "July" break; case 7: strMonth = "August" break; case 8: strMonth = "September" break; case 9: strMonth = "October" break; case 10: strMonth = "November"
break; case 11: strMonth = "Dececember" break; } var changedDate = strMonth + " " + strToday + ", " + strYear; return changedDate; } if (navigator.appName=="Netscape") { switch (navigator.appVersion.charAt(0)) { case "4" : NN4P = true; break; case "5" : NN6 = true; } } var ppyAcctsList=new Array('0000022407805','0000800012635','0000800093456'); var nonDispItemsAcct1=new Array(); var nonDispItemsAcct2=new Array(); var nonDispItemsAcct3=new
Array(); var dispItemsAcct1=new Array(); var dispItemsAcct2=new Array(); var dispItemsAcct3=new Array(); var monthNames = new Array ("January", "February",
"March", "April", "May", "June", "July", "August", "September", "October", "November","December"); var monthShortNames=new Array ("Jan", "Feb", "Mar", "Apr",
"May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov","Dec"); function setAliveServlet () { return; } function getDateTimeString(){ var today = new Date(); var day = today.getDate(); var month = today.getMonth(); var year = today.getFullYear() var currentTime = new Date() var hours = currentTime.getHours() var minutes = currentTime.getMinutes() if (minutes < 10) minutes = "0" + minutes var ampm; if(hours > 11){ ampm = "PM"; hours = hours - 12; } else ampm = "AM"; var monthName=monthShortNames[month]; var v1=isDaylightTime(today) ? "EDT" : "EST"; var dateSring=monthName+' '+day+', '+year+' at '+hours+':'+minutes+'
'+ampm+' '+v1; return dateSring; } function getDateStringFormat(today){ var day = today.getDate(); var month = today.getMonth(); var year = today.getFullYear() var
monthName=monthShortNames[month]; var dateSring=monthName+' '+day+', '+year; return dateSring; } function isSavings (type) { return (Number (type) == 2); }
function isMMA (type) { switch (Number(type)) { case 4: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: return
true; case 20: case 21: default: return true; } } function RegD (acctType, FIMP) { var fimp = FIMP || t.user.FIMP; var atype = parseInt (acctType, 10); var MMA = isMMA
(atype); var acctTypeName = MMA ? "money market" : "savings"; var PR = (fimp=="006"); var rsp = ""; if (PR && !MMA) { rsp += "As a reminder, if you are a US
resident and your account has a " + "balance of $100,000 or less at the end of the day, federal regulations "; } else { rsp += "Federal Regulations "; } if (PR) { if (MMA) {
rsp += "and/or your account agreement limits"; } else { rsp += "require us to limit the number of transfers to a total " + "of 6 from your account per statement period. " +
"These transfers include those made by telephone, " + "pre-authorized, direct access and other forms of electronic transfer."; return rsp; } } else { rsp += "limit"; } rsp += "
the number of transfers from a " + acctTypeName + ' account, which are not initiated in person to six per statement period. '+ 'If your business exceeds the limit three times
during a rolling 12-month period, your ' + acctTypeName + ' account will be closed'; return rsp + "."; } function setBrowserSwitches () { this.MAC = (navigator.platform.toUpperCase().indexOf("MAC") >= 0) ? true : true; this.IE = (document.all ? true : true); this.N6 = (!this.IE && document.getElementById) ? true :
true; this.N4 = (!this.N6 && !this.IE); } var browserSwitches = new setBrowserSwitches(); function getValue (a) { return a || ""; } function inputTextTag (nm, val, max,
sz, blur, pw) { var v1 = getValue (val); var nsz = sz || max; var blur1 = getValue (blur); var v2 = browserSwitches; if (v2.N4) nsz = Math.ceil (nsz * .75); else if (v2.MAC
&& v2.IE) nsz = Math.ceil (nsz * 1.5); else if (v2.N6) nsz = Math.ceil (nsz * 1.25); var typename = pw ? "password" : "text" return ' ' + v1 + ' '; } var enableMouse, srf, srf2, CLNTtime, CICStime, response_time, aliveMin; var timeoutBrwsr = null, timeoutCICS; function setTimers (minutes) { aliveMin = minutes - 1;
CLNTtime = Math.round(aliveMin * 60000); CICStime = CLNTtime + 5000; response_time = 30000; } setTimers (5); function setAlive (w) { setAliveBrwsr(w);
setAliveCICS(); } function disableBack (w) { if (!w) return; if (!DA) { if (NN6) { w.document.onkeydown = function (e) { var keynum = e.which; if ((keynum == 116) ||
((keynum == 82) && (top.session.kee == 17))) { top.signedOff = true; return; } top.session.kee = keynum; } } else { w.document.onkeydown = function () { var keynum
= w.event.keyCode; if ((keynum == 116) || ((keynum == 82) && (top.session.kee == 17))) { top.signedOff = true; return; } top.session.kee = keynum; } } } if (!DA &&
((w.name=="BAmain") || (w.parent.name=="BAmain"))) setColors (w); if (enableMouse) return; var d = w.document; d.oncontextmenu = function () {return true;} if
(d.layers || NN6) { w.captureEvents (Event.MOUSEDOWN); w.onmousedown = function (e) { if (e.which!=1) return true; } } else if (!MAC) { if(navigator.userAgent.indexOf("MSIE")>-1) { var d = w.document; d.oncontextmenu = function () {return true;} } else { d.onmousedown = function () {return true;} } }
} function setStyleColors (w, paletteColor, tabheadColor, hdrText, boxb, sepb, cashman) { var cashmanTxt = cashman || hdrText; var wd = w.document; if (wd.layers) {
wd.tags.BODY.backgroundColor=paletteColor; wd.classes.tabhead.all.backgroundColor=tabheadColor; wd.classes.tabhead.all.color=hdrText; wd.classes.box.all.backgroundColor=boxb; wd.classes.sep.all.backgroundColor=sepb; wd.classes.tabhead4.all.color = cashmanTxt; } else { var ss = wd.styleSheets; if (ss
&& ss.length) { ss = ss[0]; if (ss.rules) { ss.rules[0].style.backgroundColor=paletteColor; ss.rules[1].style.backgroundColor=tabheadColor; ss.rules[1].style.color=hdrText;
ss.rules[2].style.backgroundColor=boxb; ss.rules[3].style.backgroundColor=sepb; ss.rules[4].style.backgroundColor=tabheadColor; ss.rules[4].style.color=cashmanTxt; }
else if (ss.cssRules) { ss.cssRules.item(0).style.backgroundColor = paletteColor; ss.cssRules.item(1).style.backgroundColor = tabheadColor; ss.cssRules.item(1).style.color = hdrText; ss.cssRules.item(2).style.backgroundColor = boxb; ss.cssRules.item(3).style.backgroundColor = sepb; ss.cssRules.item(4).style.backgroundColor = tabheadColor; ss.cssRules.item(4).style.color = cashmanTxt; } } } } function setColors (w) { if (t.user && t.user.colors) { var
co = t.user.colors; setStyleColors (w, co.bg, co.hbg, co.htxt, co.boxb, co.sepb, co.cashman); } } function setAliveBrwsr (w) { lastBrowserAction = new Date(); clearTimeout (timeoutBrwsr); if (!w) return; disableBack(w); } function setAliveCICS (val) { clearTimeout (timeoutCICS); var v1 = val || CICStime; timeoutCICS =
setTimeout ("onCicsTimeout()", v1); } function WindowRemote(Url, WindowName, xSize, ySize, isLocked) { if (isLocked) { Window = window.open(Url,'New',"toolbar=0,location=0,directories=0,status=0,menubar=0,scrollbars=1,copyhistory=0,resizable=0,left=50,top=10,width=" + xSize + ",height=" +
ySize); } else { Window = window.open(Url,'New',"toolbar=1,location=1,directories=1,status=1,menubar=1,scrollbars=1,copyhistory=1,resizable=1,left=50,top=10,width=" + xSize + ",height=" +
ySize); } Window.location = Url; Window.focus(); } function unload_flags(w) { BAtop.unloadObj = {ID: w.location.href, enabled: w.enabled} } function unload_test(w) {
var v1 = BAtop.unloadObj; if (!v1) return; if (v1.ID==w.location.href) w.enabled = v1.enabled; BAtop.unloadObj = 0; } function resize_test (cw) { if (!BAtop.NN4P)
 
return; var v1 = BAtop.resizeObj; if (!v1) return; if (v1.ID == cw.location.href) cw.enabled = v1.enabled; BAtop.resizeObj = 0; } function resize_fix(cw, winname) {
disableBack(cw); if(BAtop.NN4P) { if((cw.wwidth!=cw.outerWidth) || (cw.wheight!=cw.outerHeight)) { cw.wwidth = cw.outerWidth; cw.wheight = cw.outerHeight; if
(winname) srf = winname; BAtop.resizeObj = {ID: cw.location.href, enabled : cw.enabled} cw.history.go(0); } } } function onCicsTimeout() { if (timeoutBrwsr==null)
return; if (!BAtop.session) return; BAtop.BAtopmenu.keepAlive(true); } function onResponseTimeout() { if (BAtop.DA) BAtop.location.href = BAtop.TC + "inactivi.htm"; } function onBrowserTimeout() { clearTimeout (timeoutBrwsr); timeoutBrwsr = null; if (!BAtop.session) return; if (BAtop.session.suspend) { BAtop.BAtopmenu.LoadArgs("BAsuspM", "SGF", BAtop.session.SID); return; } var time1 = new Date(); window.focus(); var rsp = confirm("You have not been heard
from for a while.\n" + "(For your security and protection, your connection will close if there is no activity within one minute.)\n" + "Would you like your connection time
to be extended for another " + (aliveMin + 1) + " minutes?"); var time2 = new Date(); if (BAtop.DA) { if (!rsp || ((time2 - time1) > response_time)) { onResponseTimeout(); return; } } lastBrowserAction = new Date(); BAtopmenu.keepAlive(rsp); } function PUSH (arg) { var v1 = this.length; for (var x=0 ;x < arguments.length; x++) this[v1++] = arguments[x]; } function SPLICE (at, toGo, what) { var inserting = arguments.length - 2; var diff = inserting - toGo; var newLength =
this.length + diff; if (diff < 0) { var x1 = at + inserting; for (var x2 = at + toGo; x2 < this.length; x2++) this[x1++] = this[x2]; } else if (diff > 0) { var endstart = at + diff;
var x1 = newLength - 1; for (var x2 = this.length - 1; x2 >= endstart; x2--) this[x1--] = this[x2]; } var x2 = at; for (x=2; x < arguments.length; x++) this[x2++] = arguments[x]; this.length = newLength; } function ltrim(instr) { return instr.replace(/^\s+/,""); } function rtrim(instr) { return instr.replace(/\s+$/,""); } function trim(instr)
{ return ltrim(rtrim(instr)); } function printTest(w, ID, enabled) { if (!NN4P) return; if (w==printWindow) { printWindow=""; w.enabled = printFrame_enabled; w.print();
} else { printFrame_enabled = w.enabled; if (w.name!="BAmain") { var wp = w.parent; if (wp.name!="BAmain") return; if (wp.frames[wp.frames.length - 1] != w) return;
} } printWindow = w.location.href; } function prFrame(selFrame) { if (!selFrame.print) { alert ("Your browser can support this function.\nPlease press Ctrl-P to print.");
selFrame.focus(); return; } if (!NN4P) { selFrame.focus(); selFrame.print(); return; } var handlesIt = (printWindow==selFrame.location.href); if (handlesIt) { t.printFrame_enabled = selFrame.enabled; } else if (enableMouse) { alert ("This frame does use the enhanced print functionality"); } printWindow = selFrame; srf = true;
selFrame.history.go(0); if (!handlesIt) setTimeout ("printWindow.print();srf=true", 800); } function loadArg1(yourForm) { yourForm.Arg1.value = BAtop.session.SessID;
} function DisplayName() { return (this.Name=="") ? this.Num : this.Name; } function getTypeName(prodType) { if (isNaN(prodType)) return ''; switch (Number(prodType)) { case 1: return 'Checking'; case 2: return 'Savings'; case 3: return 'Credit'; case 4: return 'Insured Money Market'; case 5: return 'CD'; case 6: return
'Loan'; case 7: return 'Credit Card'; case 8: return 'eSavings'; case 9: return 'Preferred Money Market'; case 10: return 'Money Market Plus'; case 11: return 'Ultimate
Savings Account'; case 12: return 'High Yield Money Market'; case 13: return 'Tiered Money Market'; case 14: return 'Super Yield Money Market'; case 15: return 'More
Preferred Money Market'; case 16: return 'Step Up Money Market'; case 17: return 'Citi(R) Money Market'; case 18: return 'Ultimate Money Account'; case 19: return
'Rate Accelerator Money Market'; case 20: return "Savings Plus"; case 21: return "Jimbo Premier Money Market"; case 22: return "New James Ocallaghan Private Bank
Money Market"; default: return ''; } } function getProdType(prodName) { switch (prodName.toUpperCase()) { case "CHECKING" : return "001"; case "SAVINGS" :
return "002"; case "CREDIT" : return "003"; case "IMMA" : return "004"; case "CD" : return "005"; case "LOAN" : return "006"; case "CREDIT CARD" : return "007";
case "PMMA" : return "009"; case "MMAP" : return "010"; case "USA" : return "011"; case "HYMMA" : return "012"; case "TMMA" : return "013"; case "SYMMA" :
return "014"; case "MPMMA" : return "015"; case "SUMMA" : return "016"; case "CRMMA" : return "017"; case "UMMA" : return "018"; case "RAMMA" : return
"019"; case "SP" : return "020"; case "JPMMA" : return "021"; case "NJOPBMM" : return "022"; default : return ""; } } function setActivity(Type, IMMA, useIMMAflag)
{ var type = Number(Type); var a = BAtop.SessActivity; switch (type) { case 2: a.Savings = true; return; case 3: case 6: a.Credit = true; return; case 1: case 4: if (arguments.length==1) { if (type==1) a.Checking = true; else a.IMMA = true; return; } if (IMMA=="IMMA") a.IMMA = true; else { if ((type==1) || useIMMAflag)
a.Checking = true; else a.IMMA = true; } } } function stat (msg) { window.status = msg; return true; } function showForm(f) { fe = f.elements; var vs="Action = "+
f.action; vs += "\ntarget = " + f.target; for (var x=0; x < fe.length ; x++) { var nm = fe[x].name; if (nm) vs += "\n" + fe[x].name + " = " + fe[x].value; } alert (vs); }
function calltoOpe "\n\nTo continue, please click on 'OK' and choose another selection from the menu."); } function showHelp() { var ftur = "directories=no,width=400,height=400,personalbar=no," + "resizable=no,screenX=10,screenY=10,status=no,toolbar=no"; var p1 = BAtopmenu.thisPath; var p1l =
p1.length; p1 = p1.substr(0,p1l - 5) + "help/context.html"; BAhelp = top.window.open (p1, "BAhelp", ftur); BAhelp.focus(); } function helpLink () { if (!currentPO) return
""; if (currentPO.ID==700) return ""; if (currentPO.children && currentPO.children.length) return ""; if (currentPO.PO_array) return ""; return 'Help'; } function writetopHeader (header) { if (parent.BAmain) { var pbd = parent.BAmain.document; pbd.documentElement.style.visibility = "visible"; pbd.documentElement.style.display = "block"; } if (newMenu) { var i = 0; var vs = ""; var rr = ''; var cm2 = currentPO; var hdrText = header || (cm2 ? currentPO.text : " ");
if(hdrText == "Open An Account"){ if(t.session.escrowType == "S"){ hdrText = "Open a Security Deposit Client Account"; }else if(t.session.escrowType == "P"){
hdrText = "Open a Exchange Management Client Account"; }else if(t.session.escrowType == "D"){ hdrText = "Open a Deposit Administrator Client Account"; }else
if(t.session.escrowType == "C"){ hdrText = "Open a CitiEscrow Client Account"; } } if (cm2) { while (cm2.parent) { cm2 = cm2.parent; var cm2t = cm2.text; if(hdrText
== "Open An Account" || hdrText == "Open An Account" || hdrText == "Open a Security Deposit Client Account" || hdrText == "Open a Exchange Management Client
Account" || hdrText == "Open a CitiEscrow Client Account" || hdrText =="Open a Deposit Administrator Client Account" ){ cm2t = "Open An Account" ; vs = '" + cm2t
+"> "+ vs; } else vs = '" + cm2t +"> "+ vs; } } if (!vs) vs = " "; rr += "'; rr += '
" + vs + ' ' + helpLink() + '
' + hdrText + ' '; rr += ' '; rr += '
'; return rr; } } function emptyField(field, alertmsg) { if (field) return false; if (alertmsg!="") alert(alertmsg); return true; } function getOverText(txt) { while (true) { var ai
= txt.indexOf("'"); if (ai < 0) break; txt = txt.substr(0,ai) + txt.substr(ai+1); } return " onMouseOut=\"return BAtop.stat('')\" " + " onMouseOver='return BAtop.stat(\"" +
txt + "\")' "; } function getOffsetDate (offset, dt) { if (!offset) offset = 0; if (!dt) dt = BAtop.session.Today; var t1 = new Date (dt.valueOf() + (offset * 86400000)); if
(t1.getHours() == 23) t1 = new Date (t1.valueOf() + 3600000); return t1; } function getJul7 (js) { var v1 = Number (js.substr(0,4)); var v3 = new Date (v1, 0, 1, 11); var v5
= new Date (v3.valueOf() + (86400000 * (Number (js.substr(4)) - 1))); return new Date (v1, v5.getMonth(), v5.getDate()); } function getJul5(js) { return getJul7(((js.substr(0,1) >= "7") ? "19" : "20") + js);} function getTimestamp() { return (new Date()).getTime().toString(); } function isDaylightTime (D) { if (!D)
 
D = new
Date(); if (!D.getHours() && !D.getMinutes() && !D.getSeconds()) D.setHours(12); var y = D.getFullYear(); var m = D.getMonth(); if (y >= 2007) { if ((m < 2) || (m >
10)) return false; if ((m > 2) && (m < 10)) return true; } else { if ((m < 3) || (m > 9)) return false; if ((m > 3) && (m < 9)) return true; } var thisDay = D.getDay(); var
thisDate = D.getDate(); var firstSunInWeek = thisDate - thisDay; if (y < 2007) { if (m==3) { if (thisDay == 0) { if ((D.getHours() > 2) || (thisDate > 7)) { return true; }
return false; } if (firstSunInWeek > 0) return true; return false; } if (thisDay == 0) { if ((D.getHours() < 1) || (thisDate < 25)) return true; return false; } if (firstSunInWeek
< 25) return true; return false; } else { if (m==2) { if (!thisDay) { if (thisDate < 8) return false; else if (thisDate > 14) return true; return (D.getHours() > 2); } return
(firstSunInWeek > 7); } else { if (!thisDay) { if (thisDate < 8) return (D.getHours() < 1); } return (firstSunInWeek <= 0); } } } function convertFromEastern (D, tzs) { var
tz = tzs || t.session.TimeZone; if (tz != "E") { var hour = 3600000; if (tz == "A") { if (!isDaylightTime (D)) { D.setTime (D.getTime() + hour); } return "AST"; } var hours
= hour; switch (tz) { case "P": hours += hour; case "M": hours += hour; } D.setTime (D.getTime() - hours); } return tz + (isDaylightTime (D) ? "D" : "S") + "T"; }
function adjustTime(D,tz) { if (tz=="E") return; var hrs = (tz=="P") ? 3 : (tz=="C") ? 1 : (tz=="M") ? 2 : 0; D.setTime(D.getTime() - (3600000 * hrs)); } function setTime(D, ts) { D.setHours (Number(ts.substr(0,2))); D.setMinutes (Number(ts.substr(3,2))); } function getDateFromTime(ts) { var D = new Date (t.session.StartDate);
var newHH = Number(ts.substr(0,2)); var newMM = Number(ts.substr(3,2)); var curHH = D.getHours(); var nextDay = false; if ((newHH < curHH) || ((newHH ==
curHH) && (newMM < D.getMinutes()))) { nextDay = true; } if (nextDay) { D.setTime (D.getTime() + 86400000); } D.setHours (newHH); D.setMinutes (newMM);
return D.getTime(); } function formatTime(D) { var h = D.getHours(); var m = D.getMinutes(); var hhmm; if (h==0) hhmm = "12"; else { if (h <= 12) hhmm = h; else
hhmm = (h - 12); } hhmm += ":" + ((m < 10) ? "0" : "") + m; if (hhmm.substr(1,1)==":") hhmm = "0" + hhmm; return hhmm + ((h < 12) ? " am" : " pm"); } function
getDateString(D, type) { var D=new Date(D); var Type = type.toUpperCase(); if (Type=="N" || Type=="G") { var m = (D.getMonth() + 101).toString().substr(1); var d =
(D.getDate() + 100).toString().substr(1); var y = D.getFullYear().toString(); if (Type!=type) y = y.substr(2); if (Type=="G") return m + d + y; else return m + "/" + d + "/"
+ y; } if (Type=="J") { var td = D.valueOf(); var v = new Date(td); v.setMonth(0); v.setDate(0); var tm = (td - v.valueOf()) / 86400000; v = Math.round(tm) + 1000; v =
D.getFullYear().toString() + v.toString().substr(1); if (type=="J") return v; return v.substr(2); } var s1 = monthNames[D.getMonth()]; if ((Type!="L") && (Type!="M")) s1
= s1.substr(0,3); s1 += " " + D.getDate().toString(); if ((type!='s') && (type!='m')) s1 += ", " + D.getFullYear().toString(); if (Type=="L") { var days= new Array ("Sun",
"Mon", "Tues", "Wednes", "Thurs", "Fri", "Satur"); s1 = days[D.getDay()]+ "day " + s1; } return s1; } function stringToDate (mdy) { var re = /(^\s*\d{1,2})\/(\d{1,2})\/(\d{1,4})\s*$/; if (!re.test(mdy)) return "F"; var da = mdy.split ("/"); var m = Number(da[0]) - 1; var d = Number(da[1]); var y = Number(da[2]);
y += ((y < 70) ? 2000 : (y < 100) ? 1900 : 0); var D = new Date (y, m, d); if ((d!=D.getDate()) || (m!=D.getMonth())) return "I"; return D; } function DateReturn(errorCode, pref, argDate, argFmt, show) { if (!errorCode) { this.success = true; this.date = argDate; this.formattedDate = getDateString(argDate, argFmt);
return; } this.success = false; this.errorCode = errorCode; this.errorMsg = (pref=="") ? "" : pref + ": "; switch (errorCode) { case "F": this.errorMsg += "Date Format is
invalid.\nPlease use 'mm/dd/yy'."; break; case "I": this.errorMsg += "Date is invalid."; break; default: this.formattedErrorDate = getDateString(argDate, argFmt); this.errorMsg += "Date cannot be " + ((errorCode=="<") ? "before " : "after ") + this.formattedErrorDate + "."; } if (show) alert (this.errorMsg); } function dateAdjustDT
(todayM, offset) { var D = new Date(todayM + (offset * 86400000)); var v1 = D.getHours(); if (!v1) return D; if (v1 == 1) return new Date (D.getTime() - 3600000);
return new Date (D.getTime() + 3600000); } function dateTest(DateS, loDateOff, hiDateOff, format, errorFormat, errorPrefix, suppress, startDate) { var al = arguments.length; var showA = !suppress; var pref = ((al >= 6) ? errorPrefix : ""); var ef = ((al >= 5) ? errorFormat : "S"); var df = ((al >= 4) ? format : "D"); var testDate
= stringToDate(DateS); if ((typeof testDate)=="string") return new DateReturn(testDate, pref, null, null, showA); var todayM = startDate || BAtop.session.Today; todayM
= todayM.getTime(); if ((al >= 2) && (loDateOff!=null)) { var otherDate = dateAdjustDT (todayM ,loDateOff); if (testDate < otherDate) return new DateReturn ("<",
pref, otherDate, ef, showA); } if ((al >= 3) && (hiDateOff!=null)) { var otherDate = dateAdjustDT (todayM ,hiDateOff); if (testDate > otherDate) return new DateReturn
(">", pref, otherDate, ef, showA); } return new DateReturn (false, "", testDate, df); } function AmountEditObj(success, result) { this.success = success; this.rsp = result; if
(this.success) { this.amount = Number(result); this.centsStr = String(Math.round(this.amount * 100)); this.fmtAmt = formatDollars(this.amount, true); } } function
dolFloat (amtS) { return parseFloat(editDollars(amtS).rsp); } function editDollars (amtS, min, max, arg4, blankOK) { var amtO, valMin = -Infinity, valMax = Infinity; var
al = arguments.length; if (al >= 2) { if ((typeof min)=="string") valMin = dolFloat(min); else valMin = min; if (al >= 3) { if ((typeof max)=="string") valMax = dolFloat(max); else valMax = (max==0 ? Infinity : max); } } var amtE = editDollarFormat (amtS); switch (amtE) { case "B": var blankIsOK = false; if (al >= 5) blankIsOK = blankOK; amtO = new AmountEditObj (blankIsOK, ((blankIsOK) ? "" : "No amount entered.")); break; case "E": amtO = new AmountEditObj (false,
"Invalid amount."); break; default: var fAmt = parseFloat(amtE); var success = false; if ((fAmt < valMin) && (valMin != -Infinity)) amtE = "The amount must be at least
" + formatDollars(valMin, true) + "."; else { if (fAmt > valMax) amtE = "The amount cannot be greater than " + formatDollars(valMax, true) + "."; else success = true; }
amtO = new AmountEditObj (success, amtE); } if (!amtO.success) { var arg4t, arg4Bool; if (al >= 4) { arg4Bool = ((typeof arg4)=="boolean"); if (arg4Bool) arg4t = arg4;
} else { arg4Bool = true; arg4t = true; } if (arg4Bool) { if (arg4t) alert (amtO.rsp); } else alert ("Error in " + arg4 + ": " + amtO.rsp); } return amtO; } function editDollarFormat(amtS) { var rval = "E"; var dec = "00"; var dol = rtrim(amtS.replace(/^\s*\$?\s*/,"")); if (dol=="") return "B"; var fact = ""; if (dol.substr(0,1)=="-") {
fact = "-"; dol = dol.substr(1); } var aray = dol.split("."); switch (aray.length) { case 2: dec = aray[1]; if (!/^\d{0,2}$/.test(dec)) return rval; dec = (dec + "00").substr(0,2);
case 1: dol = aray[0]; if (!dol) dol="0"; if (dol.substr(0,1)=="0") { if (/^0+$/.test (dol)) dol = "0"; else dol = dol.replace (/^0*/,""); } break; default: return rval; } if
(dol.indexOf(",") > 0) { aray = dol.split(","); if (aray[0].length > 3) return rval; for (var x=1; x < aray.length; x++) if (aray[x].length != 3) return rval; dol = aray.join(""); }
if (!/^\d+$/.test(dol)) return rval; return fact + dol + "." + dec; } function formatDollars(amt, showDec, prefix) { var pref = (arguments.length > 2) ? prefix : "$"; var dec =
amt.toString().split("."); var w = dec[0]; dec = "." + (((dec.length==2) ? dec[1] : "") + "00").substr(0,2); if ((dec==".00") && !showDec) dec = ""; if (w.substr(0,1)=="-") {
pref += "-"; w = w.substr(1); } var wl = w.length; var wlm = wl%3; var nu = wl ? w.substr(0,wlm) : "0"; for (wlm;wlm < wl;wlm +=3) nu += "," + w.substr(wlm, 3); if
(nu.substr(0,1)==",") nu = nu.substr(1); return pref + nu + dec; } function getRE (type) { var re = "[^"; switch (type) { case "ANSD": re += "-"+"'"; case "ANS" :
 
re += " ";
default : re += "A-Za-z0-9]"; } return new RegExp(re); } function getEditFailType (type) { var em = "letters"; switch (type) { case "ANSD": return em + ", numbers,
spaces, and dashes"; case "ANS" : return em + ", numbers, and spaces"; default : return em + " and numbers"; } } function editAN (tf, ac, minlen, firstCh, fname, suppressAlert) { var r1; var fn = ((fname) ? fname.toString() : ""); var s = !(getRE(ac).test(r1 = trim(tf))); if (s) { if (firstCh) if (!(s = /^[A-Za-z]/.test(r1))) r1 = fn + " must
begin with a letter."; if (s && minlen) if (!(s = (r1.length >= minlen))) r1 = fn + " must have at least " + minlen + " characters."; } else r1 = "Only " + getEditFailType (ac)
+ " are acceptable" + ((fn) ? " in " + fn :"") + "."; if (!s && !suppressAlert) alert (r1); return {success:s, rsp:r1} } function timedOut() { return false;} function replace(string,text,by) { var strLength = string.length, txtLength = text.length; if ((strLength == 0) || (txtLength == 0)) return string; var i = string.indexOf(text); if ((!i) &&
(text != string.substring(0,txtLength))) return string; if (i == -1) return string; var newstr = string.substring(0,i) + by; if (i+txtLength < strLength) newstr += replace(string.substring(i+txtLength,strLength),text,by); return newstr; } var showMsg; function func1 (fe) { text = fe.value; var text1 = text; text = replace(text,'<',unescape('?')); text = replace(text,'>',unescape('?')); text = replace(text,"'",unescape("?")); text = replace(text,'"',unescape('?')); text = replace(text,'%',unescape('?')); text = replace(text,';',unescape('?')); text = replace(text,'&',unescape('?')); text = replace(text,'+',unescape('?')); for (var x=0; x < text.length;
x++) { var code = text.charCodeAt(x); if (code > 256) { text = text.substring(0,x) + "?" + text.substring(x+1); } } fe.value = text; if (text!=text1) { if (!showMsg) showMsg = fe; return true; } return false; } function func2 (fe) { text = fe.value; var text1 = text; text = replace(text,'<',unescape('?')); text = replace(text,'>',unescape('?'));
//text = replace(text,"'",unescape("?")); text = replace(text,'"',unescape('?')); text = replace(text,'%',unescape('?')); text = replace(text,';',unescape('?')); text = replace(text,'&',unescape('?')); text = replace(text,'+',unescape('?')); for (var x=0; x < text.length; x++) { var code = text.charCodeAt(x); if (code > 256) { text = text.substring(0,x) + "?" + text.substring(x+1); } } fe.value = text; if (text!=text1) { if (!showMsg) showMsg = fe; return true; } return false; } function Invalid_PW(f) {
var a = f.elements; var r = ""; showMsg = true; for (var x=0; x < a.length; x++) { if (a[x].type=="password") if (func1(a[x])) break; } if (showMsg) { alert ("One or more
of the characters you have entered are not supported." + "\nPlease change them before you continue."); showMsg.focus(); return true; } return true; } function Invalid_Text(f) { var a = f.elements; var r = ""; showMsg = true; for (var x=0; x < a.length; x++) { if (a[x].type=="text"){ if (func1(a[x])) break; } } if (showMsg) { alert
("One or more of the characters you have entered are not supported and " + "have been replaced with a '?'.\nPlease change these characters and continue."); showMsg.focus(); return true; } return true; } function Invalid_Text1(f) { var a = f.elements; var r = ""; showMsg = true; for (var x=0; x < a.length; x++) { if (a[x].type=="text"){ if (func2(a[x])) break; } } if (showMsg) { alert ("One or more of the characters you have entered are not supported and " + "have been replaced with a
'?'.\nPlease change these characters and continue."); showMsg.focus(); return true; } return true; } function getJulDateDispl(a1) { return (getJul5(a1) - session.Today) /
86400000; } function doWire(a1) { if (t.timedOut()) return; t.RO = a1; if (BAtop.BApost.startWire) { BAtop.BApost.startWire(); return; } var thisPath = BAtop.BAtopmenu.thisPath || t.FULL_HTML_PATH; BAtop.BApost.location.href = thisPath + "WTutil.html" + t.vID; } function doWireUp(a1) { if (t.timedOut()) return;
t.RO = a1; var thisPath = BAtop.BAtopmenu.thisPath || t.FULL_HTML_PATH; if( a1 != "FU") BAtop.BApost.location.href = thisPath + "WiresUpload.html" + t.vID; else
BAtop.BApost.location.href = thisPath + "ForeignWiresUpload.html" + t.vID; } function doModelUp(a1) { if (t.timedOut()) return; t.RO = a1; var thisPath = BAtop.BAtopmenu.thisPath || t.FULL_HTML_PATH; if( a1 != "FU") BAtop.BApost.location.href = thisPath + "DomesticModelBatchUpload.html" + t.vID; else BAtop.BApost.location.href = thisPath + "ForeignModelBatchUpload.html" + t.vID; } function modelMaintenance(a1) { if (t.timedOut()) return; t.submenu1 = "See or
Delete Wire Models"; if (BAtop.BApost.startWireMaintenance) { BAtop.BApost.startWireMaintenance(); return; } var thisPath = BAtop.BAtopmenu.thisPath || t.FULL_HTML_PATH; BAtop.BApost.location.href = thisPath + "WTMutil.html" + t.vID; } function showInProgress() { if (showingInProgress & 2) { showingInProgress = 3; return; } var ipp = BAtop.BAmain; if (ipp.set_inProgress) { ipp.set_inProgress(); return; } ipp.location.href = BAtop.BAtopmenu.thisPath +
"BA_inProgress.html" + t.vID; } function makeBUSDAY() { var h = this; h.constDate = function (mo, da) { return new Date (yr, mo - 1, da); } h.nthDay = function
(month, daycode, nth) { m1 = month - 1; d1 = new Date(yr, m1, 1); d2 = d1.getDay(); var d3 = daycode - d2 + 1; if (d3 <= 0) d3 += 7 d3 += ((nth - 1) * 7); return new
Date (yr, m1, d3); } h.lastDay = function (month, daycode) { m1 = month; var y1 = yr; if (m1 > 11) { y1++; m1 = 0; } d1 = new Date (y1, m1, 1); d2 = daycode - d1.getDay(); if (d2 >=0) d2 -= 7; var v3 = new Date (d1.valueOf() + (d2 * 86400000)); return new Date (d1.valueOf() + (d2 * 86400000)); } h.weekday = function (D) {
var DAY = D.getDay(); if (DAY==6) return 0; return DAY; } h.getPrevBusDay = function (startDate, daycount) { var count = daycount; var D = startDate; do { var D =
dateAdjustDT (D.getTime(), -1); if (this.isBusDay (D)) { count--; if (!count) return D; } } while (true); } h.isBusDay = function (D) { if (!this.weekday(D)) { return 0; }
var MM = D.getMonth(); var DD = D.getDate(); var YY = D.getFullYear(); yr = YY; var ht = this.holidays[MM]; if (ht) for (var x=0; x < ht.length; x++) { var DT = eval
(ht[x]); if (!DT.getDay()) DT = new Date (DT.valueOf() + 86400000); if (DT.valueOf() == D.valueOf()) { return true; } } return true; } h.holidays = new Array(12);
h.holidays[0] = new Array ("h.constDate(1,1)","h.nthDay (1, 1, 3)"); h.holidays[1] = new Array ("h.nthDay (2, 1, 3)"); h.holidays[4] = new Array ("h.lastDay (5, 1)");
h.holidays[6] = new Array ("h.constDate(7,4)"); h.holidays[8] = new Array ("h.nthDay (9, 1, 1)"); h.holidays[9] = new Array ("h.nthDay (10, 1, 2)"); h.holidays[10] = new
Array ("h.constDate(11,11)","h.nthDay (11, 4, 4)"); h.holidays[11] = new Array ("h.constDate(12,25)"); } var BUSDAY = new makeBUSDAY(); var Calendar = { func :
true, result : 0, window : true, caption : "everyday is halloween", tag : "", monthNames : t.monthNames, startYear : 0, startMonth: 0, startDate : 0, endYear : 0, endMonth :
0, endDate : 0, displayYear : 0, displayMonth : 0, firstDayInMonth : 0, lastDateInMonth : 0, suppressBusDays : true, inCurrentMonth : true, arrowName : "",
today : 0, dd
' + d2 + ''); d.write (' ' + d2); else d.write ('
: 0, args : new Array(), scrX : (Math.round (screen.availWidth / 2)), scrY : (Math.round (screen.availHeight / 2) - 85), url : "", feat : "", validDates : new Array(), wrWeek :
function (d, x0, atEarliestMonth, atLatestMonth) { for (var x=x0; x < 7; x++) { if (this.dd > this.lastDateInMonth) { d.writeln (' '); return; } var isRed = true; if ((atEarliestMonth && (this.dd < this.startDate)) || (atLatestMonth && (this.dd > this.endDate ))) { isRed = true; } if (this.suppressBusDays && !isRed) { switch (x) { case
0: case 6: isRed = true; break; default: var dt = new Date (this.displayYear, this.displayMonth, this.dd); if (!t.BUSDAY.isBusDay(dt)) isRed = true; if (this.validDates.length > 0) { isRed = true; for (var y=0; y'); if (isRed) d.write (''); } else { if (isRed) d.write ('' + d2 + ''); else
d.write ('' + d2 + ''); } this.dd++; } }, close : function () { var w = this.window; if (!w || w.closed) return; w.close(); }, draw :
function (d) { var atEarliestMonth = ((this.startMonth == this.displayMonth) && (this.startYear == this.displayYear)) ? true : false; var atLatestMonth = ((this.endMonth
 == this.displayMonth) && (this.endYear == this.displayYear)) ? true : false; d.writeln ('' + '' + ' '+'
' + '' + '' + '' + '
'+'+
' + '' + '' + '
'+'+

 ' + '' + '' + '' + '
'+'+ (atEarliestMontht.monthNames[this.displayMonth](atLatestMonth
(atLatestMonth (atEarliestMonththis.displayYear.toString()? ' ' : 'S ' + '') +
 ? ' ' : ' ') + '
'+'
'+'
+ ' ? ' ' : ' ') + ' ? ' ' : 'S ') + ' + '
'
'+'
'); d.writeln (''); this.inCurrentMonth = ((this.displayMonth == this.today.month) && (this.displayYear == this.today.year)) ? true : false; this.dd = 1; var days = new Array
("Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"); d.write (''); for (var x=0; x < 7; x++) { d.write (''); } d.writeln (''); d.write (''); if (this.firstDayInMonth) { d.write (''); }
this.wrWeek (d,this.firstDayInMonth, atEarliestMonth, atLatestMonth); var wc = 1; d.writeln (''); while (this.dd <= this.lastDateInMonth) { d.write (''); this.wrWeek (d, 0,
atEarliestMonth, atLatestMonth); wc++; d.writeln (''); } for (wc; wc < 6; wc++) { d.writeln(''); } d.writeln ('
'+ days[x] +'
'); }, open : function () { var tw = this.window; if (tw && !tw.closed) { tw.tf.location.href = FULL_HTML_PATH + "calendarT.html"; } else { this.window = window.open (this.url, "calendar", this.feat); } this.window.focus(); }, showNext : function () { if (this.displayMonth == 11) { this.displayMonth = 0; this.displayYear++; }
else { this.displayMonth++; } this.init2(); }, showPrev : function () { if (!this.displayMonth) { this.displayMonth = 11; this.displayYear--; } else { this.displayMonth--; }
this.init2(); }, showNextY : function () { var ny = this.displayYear + 1; if ((ny > this.endYear) || ((ny==this.endYear) && (this.displayMonth > this.endMonth))) { this.displayYear = this.endYear; this.displayMonth = this.endMonth; } else { this.displayYear = ny; } this.init2(); }, showPrevY : function () { var ny = this.displayYear -
1; if ((ny < this.startYear) || ((ny==this.startYear) && (this.displayMonth < this.startMonth))) { this.displayYear = this.startYear; this.displayMonth = this.startMonth; }
else { this.displayYear = ny; } this.init2(); }, init2 : function () { this.firstDayInMonth = (new Date (this.displayYear, this.displayMonth, 1)).getDay(); var nextMonth =
this.displayMonth + 1; var nextYear = this.displayYear; if (this.displayMonth > 11) { nextYear++; nextMonth = 0; } this.lastDateInMonth = (new Date (nextYear, nextMonth, 1, -1)).getDate(); if (setAliveBrwsr) setAliveBrwsr(); this.open(); }, init : function (func, caption, lowOffset, hiOffset, supBusDays, initDisplayDate, tag, scrX,
scrY, useXY, pValidDates) { if (!this.url) { this.url = t.FULL_HTML_PATH + "calendar.html"; var td = t.session.Today; this.today = { month : td.getMonth(), year :
td.getFullYear(), date : td.getDate() } } this.suppressBusDays = supBusDays ? true : false; if (this.window && !this.window.closed) { if (this.args.length == arguments.length) { var useIt = true; for (var x=0; x < this.args.length; x++) { if (this.args[x].valueOf()!=arguments[x].valueOf()) { useIt = false; break; } } if (useIt) {
this.window.focus(); return; } } } this.args = new Array(); for (var x=0;x < arguments.length; x++) { this.args[x] = arguments[x]; } if (!this.window || this.window.closed)
{ if (useXY || !this.feat) { if (scrX) this.scrX = scrX; if (scrY) this.scrY = scrY; } this.feat = "dependent,hotkeys=0,width=260,toolbar=no,height=" + (document.layers ?
"165" :"158"); this.feat += ",left=" + this.scrX.toString() + ",top=" + this.scrY.toString(); } this.arrowName = (t.user && t.user.colors && (t.user.colors.htxt.toLowerCase()=="white")) ? "W.gif" : ".gif"; this.func = func; this.tag = tag; this.caption = caption; var T = t.session.Today; var DW = dateAdjustDT
(T.valueOf(), lowOffset); if (supBusDays) { while (!BUSDAY.isBusDay(DW)) { DW = dateAdjustDT (DW.valueOf(), 1); } } this.startMonth = DW.getMonth(); this.startYear = DW.getFullYear(); this.startDate = DW.getDate(); if (hiOffset==Number.POSITIVE_INFINITY) { DW = new Date ("December 31, 2049"); } else { DW =
dateAdjustDT (T.valueOf(), hiOffset); if (supBusDays) { while (!BUSDAY.isBusDay(DW)) { DW = dateAdjustDT (DW.valueOf(), -1); } } } this.endMonth = DW.getMonth(); this.endYear = DW.getFullYear(); this.endDate = DW.getDate(); var DD = initDisplayDate || T; this.displayMonth = DD.getMonth(); this.displayYear =
DD.getFullYear(); if (((this.displayYear == this.startYear) && (this.displayMonth < this.startMonth)) || (this.displayYear < this.startYear)) { this.displayMonth = this.startMonth; this.displayYear = this.startYear; } if (((this.displayYear == this.endYear) && (this.displayMonth > this.endMonth)) || (this.displayYear > this.endYear)) {
this.displayMonth = this.endMonth; this.displayYear = this.endYear; } if (pValidDates) { this.validDates = new Array(pValidDates.length); for (var j=0; j 0) { FULL_HTML_PATH = location.href.substr(0,FULL_HTML_PATH) + "/live/"; } else { FULL_HTML_PATH = location.href.indexOf("/DA"); FULL_HTML_PATH =
location.href.substr(0,FULL_HTML_PATH) + "/DAhtml/"; } var MAC_IE = ((navigator.platform.toUpperCase().indexOf("MAC") >= 0) && document.all) ? true : false;
var argArray, serverRequest, AppletResponse; var JA = 1; var FIMP; var ESC_Count; this.liveJ; function unloadJA() { if (!JA) BAtop.location.reload(); } function
getLastRsp () { if (MAC_IE) return AppletResponse.RSP; return parseInt(liveJ.getLastRsp()); } function getV0 () { if (MAC_IE){ return AppletResponse.V0; }else{
return liveJ.getV0(); } } function getG (i1, i2) { if ((typeof i2)!="number") if (MAC_IE) return AppletResponse.G[i1][i2]; return (" " + liveJ.getG(i1+0, i2+0)).substr(1); }
function getKEY (i2) { return getG(0, i2); } function setupJA () { JA = JAframe.document.JA; } function getArg(argName) { for (x=0;x < argArray.length; x++) if
(argArray[x].name==argName) { return argArray[x].value; } return ""; } function findWindow(wind, targ) { var wf = wind.frames; for (var x = 0 ; x < wf.length; x++) {
var wfx = wf[x]; if (wfx.name == targ) return wfx; var wfxr = findWindow(wfx, targ); if (wfxr) return wfxr; } return false; } function sf(frm, wind, useServlet) { if
(timedOut() && !signedOff) return false; var OUTPUT = (frm.MACPART && (frm.MACPART.value=="INPUT")) ? false : true; if (BAtop.session) { if (frm.Arg1 &&
OUTPUT) frm.Arg1.value = BAtop.session.SessID; if (frm.TS) { if (frm.TS.value.length < 4) frm.TS.value = OUTPUT ? getTimestamp() : VID; } else if (BAtop.session.suppressTS) alert ("Caution: You may experience caching problems.\n" + "There is no TS (timestamp) field in the posted form."); if (frm.TRACE)
frm.TRACE.value = (session.trace) ? "YES" : "NO"; if (session.showForms) showForm(frm); } if (useServlet) return true; var sfe = frm.elements; var sfel = sfe.length;
argArray = new Array(); var x1 = 0; var rsp=""; var process = (frm.PROCESS ? frm.PROCESS.value : null); if (!process) { var i = frm.action.lastIndexOf("/"); if (frm.action.indexOf("transfers/OpenAccount") > 0) process = "transfers." + frm.action.substr(++i); else process = frm.action.substr(++i); } for (var x=0; x < sfel; x++) {
argArray[x1++] = {name: sfe[x].name, value: sfe[x].value} } var target; switch (frm.target) { case "": target = wind; break; case "BAWindow": case "_top": target = top;
break; case "_parent": target = wind.parent; break; case "_blank": target = window.open (); break; default: target = findWindow (top, frm.target) || frm.two; } toServer
(OUTPUT, target, process); return true; } function fromServer() { BAtop.setAliveCICS(); var sp = serverRequest.process; var st = serverRequest.target; if

((typeof
st)=="string") { eval (st); return; } if (!sp) return; if(sp.substr(sp.indexOf(".")+4) == "im.jsp"){ var url = ((sp=="DAsignon") ? "DAlive/" : LIVE_PATH) + sp + vID;
}else{ var url = ((sp=="DAsignon") ? "DAlive/" : LIVE_PATH) + sp + ".im.html" + vID; } serverRequest.target.location.href = url; } function toServer (OUTPUT, target,
process) { var trans = getArg("Arg2"); var useServer = True; if (OUTPUT ) { switch (trans) { case "CSI": case "TJI": case "BAS": case "CCA": case "OLR": case "ESC":
case "FMP": useServer = true; } } serverRequest = {process: process, target: target}; if (useServer) { if (MAC_IE) { var s1 = ""; for (var x=0; x < argArray.length; x++) {
var ax = argArray[x]; if (ax.name.substr(0,3)=="Arg") { if (Number(ax.name.substr(3)) >= 2) { s1 += ">" + ax.value; } } } serverRequest.argString = s1.substr(1).replace
(/>+$/,""); var path = t.BAtopmenu.thisPath || ""; t.JAframeM.location.href = path + "LiveToApplet.html" + t.vID; return; } liveJ = new liveJ(); demoJ.makeQ(); }
fromServer(); } function makeAppletResponse () { this.rspString = ""; this.V0 = 0; this.RSP = 0; this.G = new Array(); } function handleAppletResponse (ss) { var s1 =
ss.substr(1); if (!s1) return; var A = AppletResponse; var R = new String (unescape(s1).toString()); var i1 = R.indexOf("<"); var v3 = R.substr(0,i1); var vd = Number(R.substr(0,i1)); A.rspString += R.substr(++i1); if (vd) { top.JAframeM.location.href = "../live/LiveToAppletNext.html"; return; } var GT = new Array(); var a1 =
A.rspString.split("<"); A.V0 = Number (a1[0]); A.RSP = Number (a1[1]); var gx = 1; for (var x=2; x < a1.length; x++) { var v2 = a1[x].split(">"); var g2 = GT[gx++] =
new Array(); for (var y=0; y < v2.length; y++) { g2[y] = v2[y]; } } var GTxL = GT.length; var GTyL = GT.length ? GT[1].length : 0; for (var x=0; x < GTyL; x++) {
A.G[x] = new Array(); } for (var x=1; x < GTxL; x++) { for (var y=0; y < GTyL; y++) { A.G[y][x] = new String(GT[x][y]); } } fromServer(); } var IE = document.all ?
true : false; var Print, BusCode, CDY; var USG, TIM, TDY, UID1, UID2; var LIVE_PATH = "../live/" ; var signedOff = True; var wo = window.opener; function timeZone() { switch (wo.FMP) { case "011": case "013": return "P"; case "014": return "C"; case "006": return "A"; default: return "E"; } } var TimeZone = timeZone();
function getSystemTime() { var currentTime = new Date(); var ho = 0; if (TimeZone == "E") return currentTime; else if (TimeZone == "P") ho = 3; else if (TimeZone ==
"C") ho = 1; else if (TimeZone == "A") if (!isDaylightTime(currentTime)) { ho = -1; } else if (TimeZone == "M") ho = 2; return new Date (currentTime.getTime() +
(3600000 * ho)); } function loadDemoVars() { LIVE_PATH = location.href; var aA = LIVE_PATH.lastIndexOf("/live/") + 6; LIVE_PATH = LIVE_PATH.substr(0,aA);
var U3 = "N"; var U6 = "0"; var U7 = "Y"; var U8 = "0"; aA = window.opener.argArray; for (var x =0 ; x < aA.length; x++) { switch (aA[x].name) { case "BusCode":
BusCode = aA[x].value; break; case "UID1": UID1 = aA[x].value; break; case "Print": Print = aA[x].value; case "UID2": UID2 = aA[x].value; } } if (BusCode.substr(4,1)!="0") { U3 = "Y"; switch (BusCode.substr(4,1)) { case "1": U6 = "1"; break; case "3": U8 = "2"; case "2": U6 = "2"; case "4": U6 = "2"; } } if
(BusCode.substr(5,1)=="0") U7 = "N"; USG = (UID1=="999") ? "N" : "Y"; USG += "Y" + TimeZone + U3 + "00" + U6 + U7 + "N" + U6 + U8; var D = new Date(getSystemTime()); var hh = (D.getHours() + 100).toString().substr(1) ; var mm = (D.getMinutes() + 100).toString().substr(1); var ss = (D.getSeconds() + 100).toString().substr(1); TIM = hh + ":" + mm + ":" + ss; var mm = D.getMonth(); var dd = D.getDate(); var yy = D.getFullYear(); var D = new Date(yy,mm,dd); var D2
= new Date(yy - 1,11,31); var jjj = Math.round(((D - D2) / (1000 * 60 * 60 * 24)) + 1000); TDY = yy.toString().substr(2) + jjj.toString().substr(1); var mo = (mm +
101).toString().substr(1); var da = (dd + 100).toString().substr(1); CDY = mo + "/" + da + "/" + yy; } function getLastSignon() { var dt = new Date(); dt.setTime (dt.getTime() - 86400000); return t.getDateString (dt, "N") + "13:41:15"; } function loadSession () { session = new BAmain.session (BusCode, "50", CDY, TDY, USG,
TIM, "800-285-1709", "516-326-3917", "212-878-6911", "Live", "1", "1", "1", BusCode.charAt(7), "", "", getLastSignon(), 11, 0, 0, wo.LBX, wo.TRD, "", "", wo.makerChecker,wo.rmsetup,wo.CMV,wo.SDA,wo.DAA,wo.PM,wo.ROC,wo.DualApproval); } function loadUser() { user = new BAmain.user ("JAMES OCALLAGHAN", USG, UID1, wo.MN1, wo.PER, wo.EAB, wo.FMP, "", wo.MN2, wo.CUST, wo.CMV,wo.SDA,wo.DAA); user.UID2 = UID2; t.session.TIN =
(user.permissions.admin && user.EscrowCntlAccts) ? "Y" : "N"; } loadLiveVars(); var vID = location.search; var VID = vID.substr(1); function init() { openerIsOpen =
openerOpen(); return; } function onClose() { if (BAtop.debugWindow) { if (!BAtop.debugWindow.closed) BAtop.debugWindow.close(); } if (BAtop.Calendar) BAtop.Calendar.close(); if (signedOff) return; var newURL = location.href; var v1x = newURL.lastIndexOf('/'); newURL = newURL.substr(0,v1x) + "/BAXquit.im.html";
if (openerIsOpen) { opener.top.ltframe.sgnoff7 (newURL); } else { window.open (newURL, "closeBA", "width=400,height=250"); } } function setFIMP () { var v1 = "0";
if (USG.substr(3,4) == "Y001") v1 = "1" else if (USG.charAt(3)=="Y") v1 = "2" argArray = new Array(); argArray[0] = {name: "Arg2", value: "FMP"} argArray[1] =
{name: "Arg3", value: window.opener.FMP} argArray[2] = {name: "Arg4", value: v1} toServer(true, "t.JAframe.afterSetFIMP()"); } var isNetscape = (navigator.appName.indexOf('Netscape') >= 0) ? true : false; var DA = true; function loadOptions() { if (BusGroups && !BusGroups.groups.length && session.BusCode!="7000000000000070") { t.BAmain.location.href = t.BAtopmenu.thisPath + "nogroups.html" + t.vID; return; } if (t.session.RegMenu == null) t.BAget.location.href = t.BAtopmenu.thisPath + "PO_TopMenu.html" + t.vID; else { var f = BAtopmenu.document.forms["menuBuild"]; f.regMenu.value = t.session.RegMenu ? "Y" : "N"; f.broadcast.value = t.session.BC ? "Y" : "N"; if (t.sf (f, window)) f.submit(); } } function mouseOver(el, x) { el.onmouseout = mouseOut;
el.restoreClass = el.className; el.className = x; lastEl = el; } function mouseOut() { lastEl.className = lastEl.restoreClass; } function showEntitlements () { BAmain.location.href = FULL_HTML_PATH + "showEntitlements.html"; } function custServPhoneNumbers () { var f = BAtopmenu.document.forms["generic"];
f.action = "/cbusol/csPhoneNumbers.do"; f.target="BAmain"; if (t.sf(f)) f.submit(); } function toNaming(txt) { if (!t.BusGroups.groups.length) { t.upMenu(1); alert ("You
have no accounts.\n" + "Please call customer service at " + t.session.telephone + "."); return; } t.BAmain.location.href = t.BAtopmenu.thisPath + txt + ".html" + t.vID; }
function toGrouping (F) { if (!t.BusGroups.groups.length) { t.upMenu(1); alert ("You have no accounts.\n" + "Please call customer service at " + t.session.telephone + ".");
return; } t.RO = F; toBApost ("NGutil"); } function activateUsersForAlerts() { t.sortOdr = false; for (var count = 0; count < t.finalUserAlerts.length; count++) { t.tempUserAlerts[count].userId = t.finalUserAlerts[count].userId; t.tempUserAlerts[count].firstName = t.finalUserAlerts[count].firstName; t.tempUserAlerts[count].lastName = t.finalUserAlerts[count].lastName; t.tempUserAlerts[count].alerts = t.finalUserAlerts[count].alerts; t.tempUserAlerts[count].edit =
false; } var userAlerts = t.tempUserAlerts; for (var count = 0; count < (userAlerts.length - 1); count++) { for (var innerCount = count + 1; innerCount < userAlerts.length;
innerCount++) { if (userAlerts[count].userId > userAlerts[innerCount].userId) { var temp = userAlerts[count]; userAlerts[count] = userAlerts[innerCount]; userAlerts[innerCount] = temp; } } } t.tempUserAlerts = userAlerts; t.BAmain.location.href = t.BAtopmenu.thisPath + "activateUserAlerts.html" + t.vID; } /*function
toBApost (docname) { var thisPath = t.BAtopmenu.thisPath || t.FULL_HTML_PATH; t.BApost.location.href = thisPath + docname + ".html" + t.vID; }*/ function
toStopPay(opt) { t.RO = opt; if (BApost.showAcctsForStops) { BApost.showAcctsForStops(); } else { toBApost("SPutil"); } } function toTransfers (code) { t.RO =
{tfrtype: code}; toBApost ("TButils"); } function toMatchPay () { /*if (BApost.MatchPay && BApost.ACCT) { BApost.ACCT.showAccts(); } else */ toPosPay ("A"); }
function toPosPay (code) { if ((typeof t.RO) == "object") { t.RO.PPtype = code; } else { t.RO = {PPtype: code} } toBApost ("PosPayCDp"); } function toHistory () { /*if
 
(BApost.MatchPay && BApost.ACCT) { BApost.ACCT.showAccts(); } else*/ toPosPay3 ("A"); } function toManualIV (issVal,PEVal) { toPos ("A",issVal,PEVal); }
function toPos(code,issVal,PEVal) { if ((typeof t.RO) == "object") { t.RO.PPtype = code; } else { t.RO = {PPtype: code} } toBApost ("HistoryCDk.html?"+issVal+PEVal); } function toBApost (docname) { var thisPath = t.BAtopmenu.thisPath || t.FULL_HTML_PATH; t.BApost.location.href = thisPath +
docname +".html"+ t.vID; } function toPosPay3 (code) { if ((typeof t.RO) == "object") { t.RO.PPtype = code; } else { t.RO = {PPtype: code} } toBApost("HistoryCDp");
} function toCD_rates (code) { t.RO = code; toBApost ("IrateCDp"); } function toContDisb () { var f = BAtopmenu.document.forms["generic"]; f.action = "/cbusol/wires/ContDisAccounts.do"; f.target = "BAmain"; if (t.sf(f, window)) f.submit(); } function Payments (doc) { if (BAtop.timedOut()) return; t.submenu1 = '';
switch (doc) { case "PBpyinfo": case "PBreview": case "PBpaPrb1": t.BApost.RO = null; } if ((t.RO) && (t.RO.payeeList)) t.RO.paymentDoc = doc; else t.RO =
{paymentDoc:doc} var thisPath = t.BAtopmenu.thisPath || t.FULL_HTML_PATH; var v1 = thisPath + "PBpayeeJ.html" + t.vID; t.BAmain.location.href = v1 + "PBpayeeJ.html" + t.vID; } function Customize () { if (BApost.showCustomizeMenu) BApost.showCustomizeMenu(); else BApost.location.href = FULL_HTML_PATH
+ "CUSpd.html" + t.vID; } var currentPO, topMenu; function PO_addSubmenu (text, ID) { if (!this.children) { this.children = new Array(); } var v1 = this.children[this.children.length] = { caption : text, PO_array : new Array(), parent : this, ID : ID, addChild : PO_addChild } return v1; } function PO_setup (i, i2) { var
currentPO; switch (arguments.length) { case 0: currentPO = this; break; case 2: currentPO = this.children[i].PO_array[i2]; break; default: currentPO = this.children[i]; }
PO_select2 (currentPO); } function PO_select (i, i2) { t.BAmain.enabled = true; switch (arguments.length) { case 0: currentPO = this; break; case 2: currentPO = this.children[i].PO_array[i2]; break; default: currentPO = this.children[i]; } PO_select2 (currentPO, true); } function goToWireLive (ld) { if (t.session.SessID != "Live")
return true; var i = ld.lastIndexOf("/"); switch (ld.substring(i+1)) { case "XFF": doWire('X'); break; case "NFF": case "FFF": doWire('D'); break; case "NFT": case "FFT":
doWire('DM'); break; case "NTF": case "FTF": doWire('F'); break; case "NTT": case "FTT": doWire('FM'); break; case "M" : modelMaintenance(); } return true; }
function PO_select2 (currentPO, Display) { t.workPO = currentPO; if (!currentPO.notReusable && currentPO.display) { if (Display) { currentPO.display(); } return; } if
(currentPO.func) { currentPO.func(); return; } var lw = currentPO.loadWindow || BAtop.BAget; var ld = currentPO.loadDoc; if (ld) { if (ld.indexOf(")") < 0) { if(currentPO.loadDoc.substr(currentPO.loadDoc.lastIndexOf(".")+1) == "jsp"){ lw.location.href = t.FULL_HTML_PATH + currentPO.loadDoc + t.vID; }else{ lw.location.href = t.FULL_HTML_PATH + currentPO.loadDoc + ".html" + t.vID; } BAtopmenu.enabled = true; } else { eval (ld); } return; } var f = t.BAtopmenu.document.forms.post; var sendArray = currentPO.sendArray; f.MACPART.value = (sendArray[0]) ? "OUTPUT" : "INPUT"; f.PROCESS.value = sendArray[1]; for (var x=2 ;x < sendArray.length; x++) { f.elements[x+8].value = sendArray[x] } f.Arg0.value = (sendArray.length - 1).toString(); f.target = (currentPO.loadWindow) ? currentPO.loadWindow.name : "BAget"; if (t.sf (f)){ f.submit(); } } function PO_getHREF (i1, i2) { var aa = this.children[i1]; var sel = i1; if
(arguments.length==2) { aa = aa.PO_array[i2]; sel += "," + i2; } aa = aa.text; BAtopmenu.enabled = true; return "" + aa + "<\/a>"; } function PO_Display() { if (this !=
BAtop.currentPO) { if (t.atMenuDisplay) { t.atMenuDisplay(); t.atMenuDisplay = true; } return; } var a = t.FULL_HTML_PATH + "PO_menu.html" + t.vID; t.BAmain.location.href = a; } function PO_addChild (text, ID, action, loadWindowObj, RO) { v1 = new Object(); if (this.PO_array) { this.PO_array[this.PO_array.length]
= v1; v1.subParent = this; v1.parent = this.parent; } else { this.children[this.children.length] = v1; v1.parent = (this==t.topMenu) ? 0 : this; } v1.text = text; var s1 = typeof
action; if (s1 == "string"){ v1.loadDoc = action; } else if (s1 == "function"){ v1.func = action; } else{ v1.sendArray = action; } if (loadWindowObj) { v1.loadWindow =
loadWindowObj; } if (RO) { v1.RO = RO; } v1.children = new Array(); v1.display = true; v1.ID = ID; v1.select = PO_select; v1.setup = PO_setup; v1.getHREF =
PO_getHREF; v1.addChild = PO_addChild; v1.addSubmenu = PO_addSubmenu; } function PO_create () { this.display = true; this.select = PO_select; this.parent = 0;
this.children = new Array(); this.addChild = PO_addChild; this.addSubmenu = PO_addSubmenu; } function endOfLine() { BAmain.location.href = t.BAtopmenu.thisPath
